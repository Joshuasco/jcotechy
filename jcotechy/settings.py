"""
Django settings for jcotechy project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
# import os
# from dotenv import load_dotenv

import os
from dotenv import load_dotenv

load_dotenv() #Note that by default python-dontenv package passes the .env as a path to load_dotenv function to retreive all .env files using either os.getenv(file variable name) or os.environ.get(file variable name)
# also note that, os.environ.get(variable name) fetches it as a dictionary while os.getevn(variable name) fetches it as a assigned value.

# load_dotenv(BASE_DIR / 'env'), alternative 

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', '0').lower() in ['true', 't', '1']
print("print debug value ##############################")
print(os.getenv('DEBUG'))


ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(' ')

# superuser authentication configuration
ADMIN_USER = os.environ.get('ADMIN_USER')
ADMIN_PASSWD = os.environ.get('ADMIN_PASSWD')

# Application definition

INSTALLED_APPS = [
    # integrated library apps
    'jazzmin', #custom admin interface
    # Default apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # custom apps
    'account',
    'blog',
    'ecommerce',
    'core',
    
    # integrated library apps
    # 'admin_interface',
    # 'colorfield',
    'tinymce',
    'ckeditor',
    'django_social_share',
    'storages',
    'google_analytics',
    'sendgrid',
    

]

MIDDLEWARE = [
    #default security middleware
     'django.middleware.security.SecurityMiddleware',
     #whitenoise middleware for static files in production
    'whitenoise.middleware.WhiteNoiseMiddleware',
     #other default middlewares
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'jcotechy.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'template'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'jcotechy.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

else:
    #configure render postgres database for deployment
    import dj_database_url
    
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'), conn_max_age=600),
    }

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

#Email configurations
# EMAIL_USE_TLS = True  
# EMAIL_HOST = 'smtp.gmail.com'  
# EMAIL_HOST_USER = 'youremail@gmail.com'  
# EMAIL_HOST_PASSWORD = 'yourpassword'  
# EMAIL_PORT = 587 




#browser login session expiration settings
SESSION_EXPIRE_AT_BROWSER_CLOSE = True     # opional, as this will log you out when browser is closed
SESSION_COOKIE_AGE = 1800                  # 0r 5 * 60, same thing
SESSION_SAVE_EVERY_REQUEST = True          # Will prevent from logging you out after 300 seconds

#configure cookie settings for production
# SECURE_SSL_REDIRECT=True
# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True
#CSRF_COOKIE_SAMESITE = 'None'
#SESSION_COOKIE_SAMESITE = 'None'

# GOOGLE ID CONFIGURATION
GOOGLE_ANALYTICS_TRACKING_ID = os.getenv('GOOGLE_ANALYTICS_TRACKING_ID')

# AWS CONFIFURATION SETTINGS FOR MEDIA FILES
if not DEBUG:
    try:
        """
        using AWS setup for django media files
        """
        print("##############################")
        print("---------using AWS storage system----------------")
        print("##############################")

        """
        SHOW AWS STATIC LOGGINGS ON UPLOADING FILES
        """
        import logging

        logger = logging.getLogger('boto3')
        logger.setLevel(logging.INFO)
       
       
        # aws settings
        AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
        AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
        AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")

        # AWS_DEFAULT_ACL = "public-read"
        AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
        AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
        AWS_HEADERS= {
            'Access-Control-Allow-Origin':'*',
        }
        # TEXT_CKEDITOR_BASE_PATH = 'https://%s/djangocms_text_ckeditor/ckeditor/' % AWS_S3_CUSTOM_DOMAIN


        # S3 Static and Media Files Storage
        DEFAULT_FILE_STORAGE = 'custom_storage.MediaStorage'
        # 'storages.backends.s3boto3.S3Boto3Storage'
        # AWS_S3_FILE_OVERWRITE = True
        # AWS_DEFAULT_ACL = 'public-read'

        # S3 Media Files Storage
        AWS_MEDIA_LOCATION = 'media'
        MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_MEDIA_LOCATION}/'


        # S3 Static Files Storage
        # STATICFILES_DIRS = [BASE_DIR/'static']
        # STATIC_LOCATION = 'static'
        # STATICFILES_STORAGE = 'custom_storage.StaticStorage'
        # 'storages.backends.s3boto3.S3Boto3Storage'
        # STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATIC_LOCATION}/'
        # AWS_STATIC_LOCATION = 'static'
        # 'custom_storage.StaticStorage'
        """
        use whitenoise alternatively for static files storage and compression in production
        """ 
        # Using whitenoise  static settings
        STATIC_URL = '/static/'
        STATICFILES_DIRS = [BASE_DIR/'static']
        STATIC_ROOT = BASE_DIR/'staticfiles'
        STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
   

       
        

        #ckeditor 
                # CKEDITOR_CONFIGS = {
                # "default": {
                #     "removePlugins": "stylesheetparser",
                # }
                # }
                # AWS_QUERYSTRING_AUTH = False
        # CKEDITOR_BROWSE_SHOW_DIRS = True
        # CKEDITOR_RESTRICT_BY_USER = True
        # CKEDITOR_RESTRICT_BY_DATE = False
        #CKEDITOR_BASEPATH = f"https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_STORAGE_BUCKET_NAME}/{STATIC_LOCATION}/ckeditor/ckeditor/"
        #"https://blogteck.s3.us-east-2.amazonaws.com/static/ckeditor/ckeditor/"
        # TEXT_CKEDITOR_BASE_PATH = 'https://%s/djangocms_text_ckeditor/ckeditor 
    except:
        pass
else:
# except:
    """
    use local setup for django static and media files
    """
    print("-------------using LOCAL SETUP-------------")

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.1/howto/static-files/

    # local static settings
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [BASE_DIR/'static']
    STATIC_ROOT = BASE_DIR/'staticfiles'
    # STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

    # local mediafiles settings (user uploaded files)
    MEDIA_URL = '/media/'
    # Absolute filesystem path to the directory that will hold user-uploaded files locally.
    MEDIA_ROOT = BASE_DIR/ 'media/'
    
    # DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'


# Account login and redirect url
from django.urls import reverse, reverse_lazy
from django.shortcuts import render, redirect

LOGIN_URL='account:signin'

def get_login_redirect_url(request):
    # Get the 'next' parameter from the request GET parameters
    next_param = request.GET.get('next')
    
    # If the 'next' parameter is present and is a relative URL, return it
    if next_param and not next_param.startswith('http'):
        return next_param
    
    # Otherwise, redirect to the homepage
    return '/'
    
# Set the LOGIN_REDIRECT_URL to be the get_login_redirect_url function
LOGIN_REDIRECT_URL = get_login_redirect_url




# Twilio SendGrid email configuration
# try:

#     # GMAIL SEND MAIL CONFIFURATION
#     # EMAIL_BACKEND = "sendgrid_backend.SendgridBackend"
#     EMAIL_HOST = 'smtp.gmail.com'
#     EMAIL_PORT = 587
#     EMAIL_USE_TLS = True
#     EMAIL_HOST_USER = 'emakaodigbo1@gmail.com'
#     EMAIL_HOST_PASSWORD= "dgequoeijmcwmyzc"
#     # 

# except:
SENDGRID_API_KEY= os.environ.get('SENDGRID_API_KEY')

# EMAIL_BACKEND = "sendgrid_backend.SendgridBackend"
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'apikey' # Name for all the SenGrid accounts
EMAIL_HOST_PASSWORD = SENDGRID_API_KEY

# Toggle sandbox mode (when running in DEBUG mode)
SENDGRID_SANDBOX_MODE_IN_DEBUG=True

# echo to stdout or any other file-like object that is passed to the backend via the stream kwarg.
SENDGRID_ECHO_TO_STDOUT=True
# The email you'll be sending emails from
DEFAULT_FROM_EMAIL = os.environ.get('FROM_EMAIL', default='jcoteck@gmail.com')
# LOGIN_REDIRECT_URL = 'success'


# SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')




# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CKEDITOR CONFIFURATION SETTINGS

# URL to the directory where the CKEditor JavaScript files are stored
CKEDITOR_BASEPATH = STATIC_URL + "ckeditor/ckeditor/"
CKEDITOR_UPLOAD_PATH = "uploads/"

CKEDITOR_CONFIGS = {
     'default': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent'],
            ['JustifyLeft', 'JustifyCenter', 'JustifyRight'],
            ['Link', 'Unlink'],
            ['RemoveFormat', 'Source'],
            ['Maximize', 'ShowBlocks'],
        ],
        'width': '100%',
        'height': 300,
        'filebrowserWindowWidth': 940,
        'filebrowserWindowHeight': 725,
        # 'extraPlugins': 'image2,video',
    }
}


# TINYMCE_JS_URL = os.path.join(STATIC_URL, "tiny_mce/tiny_mce.js")
# TINYMCE_JS_ROOT = os.path.join(STATIC_ROOT, "tiny_mce")

# TINYMCE CONFIFURATION SETTINGS
TINYMCE_DEFAULT_CONFIG = {
    'height': 360,
    'width': "100%",
    'cleanup_on_startup': True,
    'custom_undo_redo_levels': 20,
    'selector': 'textarea',
    'theme': 'silver',
    'plugins': '''
        textcolor save link image media preview codesample contextmenu
        table code lists fullscreen  insertdatetime  nonbreaking
        contextmenu directionality searchreplace wordcount visualblocks
        visualchars code fullscreen autolink lists  charmap print  hr
        anchor pagebreak
    ''',
    # 'plugins': 'media',
    # 'media_dimensions': False,
    # 'media_poster': False,
    # 'media_alt_source': False,
    # 'media_filter_html': False,
    # 'media_filter_css': False,
    # 'media_filter_script': False,
    'toolbar1': '''
        fullscreen preview bold italic underline | fontselect,
        fontsizeselect  | forecolor backcolor | alignleft alignright |
        aligncenter alignjustify | indent outdent | bullist numlist table |
        | link image media | codesample |
    ''',
    'toolbar2': '''
        visualblocks visualchars |
        charmap hr pagebreak nonbreaking anchor |  code |
        ''',
    'contextmenu': 'formats | link image',
    'menu': '[]',
    'statusbar': 'false',
}

#  JAZZMIN CONFIGURATION
JAZZMIN_SETTINGS = {
    # title of the window (Will default to current_admin_site.site_title if absent or None)
    "site_title": "Jcoteck Admin",

    # Title on the login screen (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_header": "Jcoteck",

    # Title on the brand (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_brand": "Jcoteck",

    # Logo to use for your site, must be present in static files, used for brand on top left
    "site_logo": "images/core/jcoteck-icon.png",

    # Logo to use for your site, must be present in static files, used for login form logo (defaults to site_logo)
    "login_logo":"images/core/jcoteck-logo.png",

    # Logo to use for login form in dark themes (defaults to login_logo)
    "login_logo_dark": None,

    # CSS classes that are applied to the logo above
    "site_logo_classes": "img-circle",

    # Relative path to a favicon for your site, will default to site_logo if absent (ideally 32x32 px)
    "site_icon": None,

    # Welcome text on the login screen
    "welcome_sign": "Welcome to Jcoteck",

    # Copyright on the footer
    "copyright": "Jcoteck",

    # List of model admins to search from the search bar, search bar omitted if excluded
    # If you want to use a single search field you dont need to use a list, you can use a simple string 
    "search_model": ["auth.User", "blog.Article"],

    # Field name on user model that contains avatar ImageField/URLField/Charfield or a callable that receives the user
    "user_avatar": None,

    ############
    # Top Menu #
    ############

    # Links to put along the top menu
    "topmenu_links": [

        # Url that gets reversed (Permissions can be added)
        {"name": "Home",  "url": "core:home", "permissions": ["auth.view_user"]},

        # external url that opens in a new window (Permissions can be added)
        {"name": "Support", "url": "https://github.com/farridav/django-jazzmin/issues", "new_window": True},

        # model admin to link to (Permissions checked against model)
        {"model": "auth.User"},
        {"model":"blog.Article"},

        # App with dropdown menu to all its models pages (Permissions checked against models)
        {"app": "core"},
    ],

    #############
    # User Menu #
    #############

    # Additional links to include in the user menu on the top right ("app" url type is not allowed)
    "usermenu_links": [
        {"name": "Support", "url": "https://github.com/farridav/django-jazzmin/issues", "new_window": True},
        {"model": "auth.user"}
    ],

    #############
    # Side Menu #
    #############

    # Whether to display the side menu
    "show_sidebar": True,

    # Whether to aut expand the menu
    "navigation_expanded": True,

    # Hide these apps when generating side menu e.g (auth)
    "hide_apps": [],

    # Hide these models when generating side menu (e.g auth.user)
    "hide_models": [],

    # List of apps (and/or models) to base side menu ordering off of (does not need to contain all apps/models)
    "order_with_respect_to": ["auth", "books", "books.author", "books.book"],

    # Custom links to append to app groups, keyed on app name
    "custom_links": {
        "books": [{
            "name": "Make Messages", 
            "url": "make_messages", 
            "icon": "fas fa-comments",
            "permissions": ["books.view_book"]
        }]
    },

    # Custom icons for side menu apps/models See https://fontawesome.com/icons?d=gallery&m=free&v=5.0.0,5.0.1,5.0.10,5.0.11,5.0.12,5.0.13,5.0.2,5.0.3,5.0.4,5.0.5,5.0.6,5.0.7,5.0.8,5.0.9,5.1.0,5.1.1,5.2.0,5.3.0,5.3.1,5.4.0,5.4.1,5.4.2,5.13.0,5.12.0,5.11.2,5.11.1,5.10.0,5.9.0,5.8.2,5.8.1,5.7.2,5.7.1,5.7.0,5.6.3,5.5.0,5.4.2
    # for the full list of 5.13.0 free icon classes
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",

        "blog.article": "fas fa-book",
        "blog.category": "fas fa-list-alt",
        "blog.tag": "fas fa-tags",
        "blog.comment": "fas fa-comments",
        "blog.share":"fas fa-share",
        "blog.viewer":"fas fa-eye",

        "core.contact":"fas fa-address-book",
        "core.event":"fas fa-calendar",
        "core.eventcat": "fas fa-list-alt",
        "core.faq":"fas fa-question-circle",
        "core.gallary":"fas fa-image",
        "core.opportunity":"fas fa-tasks",
        "core.product":"fas fa-product-hunt",
        "core.review":"fas fa-star",
        "core.service":"fas fa-utility",
        "core.quote":"fas fa-quote-right",
        "core.position":"fas fa-user",
        "core.portfolio":"fas fa-briefcase",
        "core.portfoliocat":"fas fa-list-alt",
        "core.subscriber":"fas fa-bell",
        "core.service":"fas fa-globe",
        "core.privacypolicy":"fas fa-shield-alt",

      
        "ecommerce.product":"fas fa-plus-circle",
        "ecommerce.productcat":"fas fa-list-alt",
        "ecommerce.payment":"fas fa-credit-card",
        "ecommerce.productimg":"fas fa-image",
        "ecommerce.refund":"fas fa-undo-alt",
        "ecommerce.coupon":"fas fa-percent",
        "ecommerce.order":"fas fa-shopping-bag",
        "ecommerce.orderproduct":"fas fa-shopping-cart",

    },
    # Icons that are used when one is not manually specified
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",

    #################
    # Related Modal #
    #################
    # Use modals instead of popups
    "related_modal_active": False,

    #############
    # UI Tweaks #
    #############
    # Relative paths to custom CSS/JS scripts (must be present in static files)
    "custom_css": 'static/admin/base_site.css',
    "custom_js": None,
    # Whether to link font from fonts.googleapis.com (use custom_css to supply font otherwise)
    "use_google_fonts_cdn": True,
    # Whether to show the UI customizer on the sidebar
    "show_ui_builder": True,

    ###############
    # Change view #
    ###############
    # Render out the change view as a single form, or in tabs, current options are
    # - single
    # - horizontal_tabs (default)
    # - vertical_tabs
    # - collapsible
    # - carousel
      # "changeform_format": "horizontal_tabs",
    # override change forms on a per modeladmin basis
    # "changeform_format_overrides": {"auth.user": "collapsible", "auth.group": "vertical_tabs"},
    # Add a language dropdown into the admin
    # "language_chooser": True,
}


#JAZMIN THEME CONFIGURATION
JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": "navbar-indigo",
    "accent": "accent-pink",
    "navbar": "navbar-indigo navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": True,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": True,
    "sidebar": "sidebar-dark-indigo",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "default",
    "dark_mode_theme": "cyborg",
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    }
}

JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": True,
    "brand_small_text": False,
    "brand_colour": "navbar-indigo",
    "accent": "accent-indigo",
    "navbar": "navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": True,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": True,
    "sidebar": "sidebar-dark-indigo",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": True,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "default",
    "dark_mode_theme": "darkly",
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    }
}
